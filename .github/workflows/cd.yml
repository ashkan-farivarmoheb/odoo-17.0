name: Odoo CD

on:
  workflow_dispatch: # Enable manual triggering
    inputs:
      target-env:
        required: true
        type: string
      github_sha:
        required: true
        type: string
      nfs_access_point_id:
        type: string
      snapshot:
        default: false
        type: boolean

  workflow_call:
    inputs:
      target-env:
        required: true
        type: string
      github_sha:
        required: true
        type: string
      nfs_access_point_id:
        type: string
      snapshot:
        default: false
        type: boolean

    secrets:
      AWS_REGION:
        required: true
      AWS_ACCOUNT_ID:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
env:
  service_name: "odoo"
  service_version: "17.0"

jobs:
  deploy:
    name: Deploy to ${{ inputs.target-env }}
    permissions:
      contents: none
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.target-env }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clone Infrastructure Repo
        run: git clone https://github.com/ashkan-farivarmoheb/odoo-infra.git
        # env:
        #   GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

      - name: Variables
        id: vars
        uses: actions/github-script@v3
        with:
          script: |
            const branch = context.ref.split('/').pop()
            const ecr_repository = `${process.env.service_name}-${process.env.service_version}`;
            const { owner, repo } = context.repo;
            core.exportVariable('BRANCH', branch);
            core.exportVariable('ecr_repository', ecr_repository);
      - name: Set Environment Variables for Secrets
        id: secrets
        run: |
          echo "new_relic_license_key=$(jq -r .${{ inputs.target-env }} <<< '{
            "develop": "${{ secrets.NEW_RELIC_LICENSE_KEY_DEVELOP }}",
            "sit": "${{ secrets.NEW_RELIC_LICENSE_KEY_SIT }}",
            "prod": "${{ secrets.NEW_RELIC_LICENSE_KEY_PROD }}"
          }')" >> $GITHUB_ENV

      - name: Set ecr_image_tag
        id: set-ecr-image-tag
        run: |
          if [[ "${{ inputs.snapshot }}" == "true" ]]; then
            ecr_image_tag="snapshot-${{ inputs.github_sha }}"
          else
            ecr_image_tag="develop-${{ inputs.github_sha }}"
          fi
          echo "ecr_image_tag=$ecr_image_tag" >> "$GITHUB_ENV"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check the image exists in ECR
        id: ecr-image-exists
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ecr_repository }}
          IMAGE_TAG: ${{ env.ecr_image_tag }}
        run: ./ecr_query.sh $ECR_REPOSITORY $IMAGE_TAG
        working-directory: scripts

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        if: steps.ecr-image-exists.outputs.image_tag == ''
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull image from Docker Hub
        env:
          DOCKER_REPOSITORY: ${{ env.ecr_repository }}
          IMAGE_TAG: ${{ env.ecr_image_tag }}
        if: steps.ecr-image-exists.outputs.image_tag == ''
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/$DOCKER_REPOSITORY:$IMAGE_TAG

      - name: Push image to AWS ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ecr_repository }}
          IMAGE_TAG: ${{ env.ecr_image_tag }}
        if: steps.ecr-image-exists.outputs.image_tag == ''
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.0  # Specify the Terraform version to use

      - name: Initialize Terraform
        run: terraform init -backend-config=hcl/backend_${{ inputs.target-env }}.hcl
        working-directory: infrastructure

      - name: Validate Terraform configuration
        run: terraform validate
        working-directory: infrastructure

      - name: Plan Terraform changes
        run: |
            if [ -n "${{ inputs.nfs_access_point_id }}" ]; then
                terraform plan -var-file=tfvars/${{ inputs.target-env }}.auto.tfvars -var="tag=${{ env.ecr_image_tag }}" -var="nfs_access_point_id=${{ inputs.nfs_access_point_id }}" -var="new_relic_license_key=${{ env.new_relic_license_key }}"
            else
                terraform plan -var-file=tfvars/${{ inputs.target-env }}.auto.tfvars -var="tag=${{ env.ecr_image_tag }}" -var="new_relic_license_key=${{ env.new_relic_license_key }}"
            fi
        working-directory: infrastructure

      - name: Apply Terraform changes
        run: |
            if [ -n "${{ inputs.nfs_access_point_id }}" ]; then
                terraform apply -auto-approve -var-file=tfvars/${{ inputs.target-env }}.auto.tfvars -var="tag=${{ env.ecr_image_tag }}" -var="nfs_access_point_id=${{ inputs.nfs_access_point_id }}" -var="new_relic_license_key=${{ env.new_relic_license_key }}"
            else
                terraform apply -auto-approve -var-file=tfvars/${{ inputs.target-env }}.auto.tfvars -var="tag=${{ env.ecr_image_tag }}" -var="new_relic_license_key=${{ env.new_relic_license_key }}"
            fi
        working-directory: infrastructure
