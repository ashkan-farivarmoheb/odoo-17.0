name: Reusable deployment workflow

on:
  workflow_call:
    inputs:
      target-env:
        required: true
        type: string
      runner-id:
        type: number
      artifact-id:
        type: number
      github_sha:
        type: string
      branch:
        type: string

    secrets:
      AWS_REGION:
        required: true
      AWS_ACCOUNT_ID:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
env:
  service_name: "odoo"
  service_version: "17.0"
  ecr_image_tag: ${{ inputs.branch }}-${{ inputs.github_sha }}
jobs:
  deploy:
    name: Deploy to ${{ inputs.target-env }}
    permissions:
      contents: none
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.target-env }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - run: echo "🎉 target env ${{ inputs.target-env}}"
      - run: echo "🍏 is Dev  ${{ inputs.target-env }} == 'develop'"
      - run: echo "🍏 is SIT1  ${{ inputs.target-env }} == 'sit1'"
      - run: echo "🍏 is SIT2  ${{ inputs.target-env }} == 'sit2'"
      - run: echo "🐧 is Prod  ${{ inputs.target-env }} == 'prod'"
      
      - name: Variables
        id: vars
        uses: actions/github-script@v3
        with:
          script: |
            const branch = context.ref.split('/').pop()
            const ecr_repository = `${process.env.service_name}-${process.env.service_version}`;
            const { owner, repo } = context.repo;
            core.exportVariable('BRANCH', branch);
            core.exportVariable('ecr_repository', ecr_repository);
            
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Check the image exists in ECR
        id: ecr_image_exists
        run: |
          IMAGE_META="$( aws ecr describe-images --repository-name=${{env.service_name}}-${{env.service_version}} --image-ids=imageTag=${{inputs.branch}}-${{inputs.github_sha}} 2>&1 )"          
          if [ $? -eq 0 ]; then \
              # Command was successful, process the output \
              echo "Images found in repository: ${{env.service_name}}-${{env.service_version}}";
              IMAGE_TAG=$(echo "$IMAGE_META" | jq '.imageDetails[0].imageTags[0]' -r);
              echo $IMAGE_TAG;
          else \
              # Check if the error is ImageNotFoundException \
              if [[ $IMAGE_META == *"ImageNotFoundException"* ]]; then \
                  echo "No images found in repository:  ${{env.service_name}}-${{env.service_version}}";
              else \
                  # Some other error occurred \
                  echo "Error: $IMAGE_META";
              fi; \
          fi; \
          echo "image_tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ecr_repository }}
          IMAGE_TAG: '${{ inputs.branch }}-${{inputs.github_sha}}'
        if: ${{ steps.ecr_image_exists.outputs.image_tag != env.ecr_image_tag }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg ODOO_VERSION=${{env.service_version}} --build-arg GITHUB_SHA=${{inputs.github_sha}} --build-arg RUNNER_ID=${{inputs.runner-id}} --build-arg ARTIFACT_ID=${{inputs.artifact-id}} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"