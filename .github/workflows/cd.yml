name: Odoo CD

on:
  workflow_dispatch: # Enable manual triggering
    inputs:
      target-env:
        required: true
        type: string
      artifact-id:
        type: number
      github_sha:
        required: true
        type: string
      # branch:
      #   required: true
      #   type: string

  workflow_call:
    inputs:
      target-env:
        required: true
        type: string
      artifact-id:
        type: number
      github_sha:
        required: true
        type: string
      # branch:
      #   required: true
      #   type: string

    secrets:
      AWS_REGION:
        required: true
      AWS_ACCOUNT_ID:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
env:
  service_name: "odoo"
  service_version: "17.0"
  # ecr_image_tag: ${{ inputs.branch }}-${{ inputs.github_sha }}
jobs:
  deploy:
    name: Deploy to ${{ inputs.target-env }}
    permissions:
      contents: none
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    environment:
      name: ${{ inputs.target-env }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Variables
        id: vars
        uses: actions/github-script@v3
        with:
          script: |
            const branch = context.ref.split('/').pop()
            const ecr_repository = `${process.env.service_name}-${process.env.service_version}`;
            const { owner, repo } = context.repo;
            core.exportVariable('BRANCH', branch);
            core.exportVariable('ecr_repository', ecr_repository);
      
      - name: Get Branch Name
        id: get_branch
        uses: actions/github-script@v3
        with:
          script: |
            const response = await github.request('GET /repos/{owner}/{repo}/commits/{commit_sha}/branches', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: 'cd95a49e4d7dc37478b7bdff7e6d718ebb084a75'
            });
            console.log(response.data[0].name);
          result-encoding: string
    
      - name: Print Branch Name
        run: |
          echo "Branch Name: ${{ steps.get_branch.outputs.result }}"

      # - name: Get branches containing commit
      #   uses: actions/github-script@v3
      #   with:
      #     script: |
      #       github.git.getCommit({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         commit_sha: 'cd95a49e4d7dc37478b7bdff7e6d718ebb084a75',
      #         mediaType: {
      #           format: 'sha'
      #         }
      #       }).then(response => {
      #         const branchName = response.data.parents[0].html_url.split('/').pop(); // Extracting branch name from commit URL
      #         console.log(`Branch name: ${branchName}`);
      #       }).catch(error => {
      #         // Commit not found in this branch
      #         if (error.status === 404) {
      #           console.log("Commit not found");
      #         } else {
      #           // Other error occurred
      #           console.error(error);
      #         }
      #       });

      #       const { data: branches } = await github.repos.listBranches({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         per_page: 100 // Increase if you have more than 100 branches
      #       });

      #       const branchesContainingCommit = branches.filter(branch => {
      #         return github.git.getCommit({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           commit_sha: 'cd95a49e4d7dc37478b7bdff7e6d718ebb084a75',
      #           mediaType: {
      #             format: 'sha'
      #           }
      #         }).catch(error => {
      #           // Commit not found in this branch
      #           if (error.status === 404) {
      #             return false;
      #           }
      #           // Other error occurred
      #           throw error;
      #         });
      #       });

      #       console.log(branchesContainingCommit.map(branch => branch.name));

      - name: Query branch containing commit
        id: check-branch
        run: ./branch_query.sh ${{ inputs.github_sha }}
        working-directory: scripts
            
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check the image exists in ECR
        id: ecr-image-exists
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ecr_repository }}
          IMAGE_TAG: ${{ env.ecr_image_tag }}
        run: ./ecr_query.sh $ECR_REPOSITORY $IMAGE_TAG
        working-directory: scripts

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ecr_repository }}
          IMAGE_TAG: ${{ env.ecr_image_tag }}
        if: steps.ecr-image-exists.outputs.image_tag == ''
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --build-arg REPOSITORY=${{ github.repository }} \
            --build-arg ODOO_VERSION=${{env.service_version}} \
            --build-arg GITHUB_TOKEN=${{secrets.GITHUB_TOKEN}} \
            --build-arg GITHUB_SHA=${{inputs.github_sha}} \
            --build-arg ARTIFACT_ID=${{inputs.artifact-id}} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # - name: Set up Terraform
      #   uses: hashicorp/setup-terraform@v1
      #   with:
      #     terraform_version: 1.1.0  # Specify the Terraform version to use

      # - name: Initialize Terraform
      #   run: terraform init -backend-config=hcl/backend_${{ inputs.target-env }}.hcl
      #   working-directory: infrastructure
        
      # - name: Validate Terraform configuration
      #   run: terraform validate
      #   working-directory: infrastructure
        
      # - name: Plan Terraform changes
      #   run: terraform plan -var-file=tfvars/${{ inputs.target-env }}.auto.tfvars -var="tag=${{ env.ecr_image_tag }}"
      #   working-directory: infrastructure
        
      # - name: Apply Terraform changes
      #   run: terraform apply -auto-approve -var-file=tfvars/${{ inputs.target-env }}.auto.tfvars -var="tag=${{ env.ecr_image_tag }}"
      #   working-directory: infrastructure
      
      # - name: Destroy Terraform changes
      #   run: terraform destroy -auto-approve -var-file=tfvars/${{ inputs.target-env }}.auto.tfvars -var="tag=${{ env.ecr_image_tag }}"
      #   working-directory: infrastructure